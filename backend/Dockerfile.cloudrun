# Build stage
FROM node:20-alpine AS builder

# Install build dependencies for canvas
RUN apk add --no-cache \
    build-base \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies
RUN npm ci

# Copy source code
COPY . .

# Build TypeScript code
RUN npm run build

# Production stage
FROM node:20-alpine

# Install runtime dependencies for canvas and face-api.js
RUN apk add --no-cache \
    cairo \
    jpeg \
    pango \
    giflib \
    pixman \
    libjpeg-turbo \
    freetype

# Create a non-root user and set appropriate permissions
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001 -G nodejs

WORKDIR /app

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --omit=dev && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Make sure you have a directory for the health check
RUN mkdir -p /tmp && \
    chown -R nodeuser:nodejs /app /tmp

# Create a directory for service account key
RUN mkdir -p /secrets && \
    chown -R nodeuser:nodejs /secrets

# Explicitly set environment variables for better clarity
ENV PORT=8080
ENV NODE_ENV=production

# Print debugging information on startup
CMD node -e "console.log('Starting server with NODE_ENV=' + process.env.NODE_ENV + ', PORT=' + process.env.PORT)" && \
    node -e "console.log('Storage bucket: ' + process.env.STORAGE_BUCKET_NAME)" && \
    node -e "console.log('Project ID: ' + process.env.GOOGLE_CLOUD_PROJECT_ID)" && \
    node dist/index.js 